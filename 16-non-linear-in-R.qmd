---
title: "Non-linearity in R"
author: "Lucy D'Agostino McGowan"
footer:  "[Dr. Lucy D'Agostino McGowan](https://lucymcgowan.com)"
logo: "img/icon.png"
format: 
  kakashi-revealjs: 
    theme: [custom.scss]
    slide-number: true
    chalkboard: true
    title-slide-attributes: 
      data-background-color: "#fff" 
      data-color: "#70001A"
    menu: true
editor: 
  markdown: 
    wrap: 72
---

## Natural Cubic Splines {.small}

* Variables you would like to fit using a natural (restricted) cubic spline can be set using the `step_ns()` function in your recipe
* By default, this will create a natural spline with **two** degrees of freedom (in other words, a spline with three knots: 2 boundary knots and one internal knot)
* Behind the scenes, this is using the `splines::ns` function

## Natural Cubic Splines Example {.small}

The dataset consists of different biomass fuels characterized by the amount of certain molecules and the corresponding "higher heating value" (HHV). We are going to try to predict HHV based on the quantity 5 molecules.

```{r}
#| code-line-numbers: "1-5|6|"
library(tidymodels)

rec_splines <- recipe(
  HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur, 
  data = biomass) |>
  step_ns(carbon, hydrogen)
```

## Natural Cubic Splines Example {.small}

```{r}
expanded_biomass <- prep(rec_splines, biomass) |>
  bake(biomass)

expanded_biomass
```

## Natural Cubic Splines Example {.small}

Let's increase the degree of the spline

```{r}
#| code-line-numbers: "|7|"
library(tidymodels)

rec_splines <- recipe(
  HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur, 
  data = biomass) |>
  step_ns(carbon, hydrogen, 
          deg_free = 3)

expanded_biomass <- prep(rec_splines, biomass) |>
  bake(biomass)

expanded_biomass
```

## What is happening behind the scenes?

* The default "boundary knots" are the extremes of the data

. . .

::: question
For a natural cubic spline, what happens beyond the "boundary knots"?
:::

## What is happening behind the scenes?

The default interior knots are set as follows:

|`deg_free` | # of interior knots | quantile |
|-----------|----------|----------|
| 2 | 1 | 50%|
| 3 | 2 | 33.3%, 66.7% | 
| 4 | 3 | 25%, 50%, 75%|
| 5 | 4 | 20%, 40%, 60%, 80% |
| 6 | 5 | 16.7%, 33.3%, 50%, 66.7%, 83.3%

## Natural Cubic Splines Example

```{r}
wf <- workflow() |>
  add_recipe(rec_splines) |>
  add_model(linear_reg())

fit_splines <- fit(wf, data = biomass)

tidy(fit_splines)
```


## Natural Cubic Splines Example {.small}

```{r}
#| code-line-numbers: "|1|3-8|3|4|5|6|7|10-13|"
library(DALEXtra)

splines_explainer <- explain_tidymodels(
  fit_splines,
  data = dplyr::select(biomass, -HHV),
  y = biomass$HHV,
  verbose = FALSE
)

carbon_profile <- model_profile(
  splines_explainer,
  variables = "carbon"
)
```

## Aside: `ggplot2` helper function

*You don't need to know what is going on here and I will provide this for your labs!*
```{r}

ggplot_pdp <- function(obj, x) {
  
  p <- 
    as_tibble(obj$agr_profiles) %>%
    mutate(`_label_` = stringr::str_remove(`_label_`, "^[^_]*_")) %>%
    ggplot(aes(`_x_`, `_yhat_`)) +
    geom_line(data = as_tibble(obj$cp_profiles),
              aes(x = {{ x }}, group = `_ids_`),
              linewidth = 0.5, alpha = 0.05, color = "gray50")
  
  num_colors <- n_distinct(obj$agr_profiles$`_label_`)
  
  if (num_colors > 1) {
    p <- p + geom_line(aes(color = `_label_`), linewidth = 1.2, alpha = 0.8)
  } else {
    p <- p + geom_line(color = "cornflower blue", linewidth = 1.2, alpha = 0.8)
  }
  
  p
}
```


## Natural Cubic Splines Example {.small}

```{r}
ggplot_pdp(carbon_profile, carbon) + 
  labs(x = "Carbon",
       y = "Average Predicted HHV",
       title = "Partial Dependence Profile")
```




## Natural Cubic Splines Example {.small}

```{r}
hydrogen_profile <- model_profile(
  splines_explainer,
  variables = "hydrogen"
)

ggplot_pdp(hydrogen_profile, hydrogen) + 
  labs(x = "Hydrogen",
       y = "Average Predicted HHV",
       title = "Partial Dependence Profile")
```

## Natural Cubic Splines Example {.small}

```{r}
oxygen_profile <- model_profile(
  splines_explainer,
  variables = "oxygen"
)

ggplot_pdp(oxygen_profile, oxygen) + 
  labs(x = "Oxygen",
       y = "Average Predicted HHV",
       title = "Partial Dependence Profile")
```

## A bit more on the "workflow"

* The `workflow()` allows us to iteratively update our model without having to change the recipe after tuning.
* We can use a few helper functions: `select_best` and `finalize_workflow`

## A bit more on the "workflow" {.small}
```{r}
#| echo: false
set.seed(10)
```

```{r}
#| code-line-numbers: "|1-4|4|6-8|10|10-15|17|"
#| cache: true
recipe_splines <- recipe(
  HHV ~ carbon + hydrogen + oxygen + nitrogen + sulfur, 
  data = biomass) |>
  step_ns(carbon, hydrogen, deg_free = tune())

splines_wf <- workflow() |>
  add_recipe(recipe_splines) |>
  add_model(linear_reg())

cv <- vfold_cv(biomass)

splines_tuned <- tune_grid(
  splines_wf,
  cv
)

show_best(splines_tuned, "rmse")
```

. . .

::: question
How many degrees of freedom does the best model have?
:::

## A bit more on the "workflow" {.small}


```{r}
#| code-line-numbers: "1|1-7|9-14|10|16-19|"
best_params <- select_best(splines_tuned, "rmse")

splines_wf_final <- splines_wf |>
  finalize_workflow(best_params)

final_fit <- fit(splines_wf_final,
                 data = biomass)

final_explainer <- explain_tidymodels(
  final_fit,
  data = dplyr::select(biomass, -HHV),
  y = biomass$HHV,
  verbose = FALSE
)

carbon_profile <- model_profile(
  final_explainer,
  variables = "carbon"
)
```

## A bit more on the "workflow" {.small}

```{r}
ggplot_pdp(carbon_profile, carbon) + 
  labs(x = "Carbon",
       y = "Average Predicted HHV",
       title = "Partial Dependence Profile")
```